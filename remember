//        if (textBytes != null && textBytes.length > 255) {
//            submitSm.addOptionalParameter(new Tlv(SmppConstants.TAG_MESSAGE_PAYLOAD, textBytes, "message_payload"));
//        } else {
//            submitSm.setShortMessage(textBytes);
//        }



  CREATE TABLE TBL_SMPP_CLIENT_LOG
            (
  PK_SMPP_CLIENT NUMERIC NOT NULL,
  MSISDN NUMERIC,
  REQUEST_ID VARCHAR2(20),
  SMS_SENDER VARCHAR2(20),
  SEQUENCE_NUMBER NUMERIC,
  MESSAGE VARCHAR2(4000),
  TRACK_CODE VARCHAR2(50),
  IP VARCHAR2(15),
  DATE_TIME DATE,
  LOG_LEVEL VARCHAR2(20),
  EXEC_LOG VARCHAR2(4000),
  ERROR_CODE VARCHAR2(20),
  CONSTRAINT SMPP_PK PRIMARY KEY (PK_SMPP_CLIENT)
  ) ROWDEPENDENCIES;


CREATE SEQUENCE SEQ_SMPP_CLIENT START WITH 1 INCREMENT BY 1;


////////////////////
package com.behsa.usdp.model;

import javax.persistence.*;
import java.sql.Date;

@Entity
@Table(name = "TBL_SMPP_CLIENT_LOG", schema = "USSD_MIGRATE_LOG_OLDOPERATION")
public class SmppLogModel {
    @Id
    @SequenceGenerator(name = "seq_smpp", sequenceName = "SEQ_SMPP")
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "seq_smpp")
    @Column(name = "PK_SMPP_CLIENT", columnDefinition = "NUMBER(10)", unique = true, nullable = false)
    private Long id;
    @Basic
    @Column(name = "MSISDN", columnDefinition = "NUMBER(10)")
    private Long msisdn;
    @Basic
    @Column(name = "REQUEST_ID", columnDefinition = "VARCHAR2(20)")
    private String requestId;
    @Basic
    @Column(name = "SMS_SENDER", columnDefinition = "VARCHAR2(20)")
    private String smsSender;
    @Basic
    @Column(name = "SEQUENCE_NUMBER", columnDefinition = "NUMBER(12)")
    private Integer sequenceNumber;
    @Basic
    @Column(name = "MESSAGE", columnDefinition = "VARCHAR2(4000)")
    private String message;
    @Basic
    @Column(name = "TRACK_CODE", columnDefinition = "VARCHAR2(50)")
    private String trackCode;
    @Basic
    @Column(name = "IP", columnDefinition = "VARCHAR2(15)")
    private String ip;
    @Basic
    @Column(name = "DATE_TIME", columnDefinition = "DATE DEFAULT CURRENT DATE")
    private Date dateTime;
    @Basic
    @Column(name = "LOG_LEVEL", columnDefinition = "VARCHAR2(20)")
    private String logLevel;
    @Basic
    @Column(name = "EXEC_LOG", columnDefinition = "VARCHAR2(4000)")
    private String execLog;
    @Basic
    @Column(name = "ERROR_CODE", columnDefinition = "VARCHAR2(20)")
    private Integer errorCode;

    public Long getMsisdn() {
        return msisdn;
    }

    public void setMsisdn(Long msisdn) {
        this.msisdn = msisdn;
    }

    public String getRequestId() {
        return requestId;
    }

    public void setRequestId(String requestId) {
        this.requestId = requestId;
    }

    public String getSmsSender() {
        return smsSender;
    }

    public void setSmsSender(String smsSender) {
        this.smsSender = smsSender;
    }

    public Integer getSequenceNumber() {
        return sequenceNumber;
    }

    public void setSequenceNumber(Integer sequenceNumber) {
        this.sequenceNumber = sequenceNumber;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getTrackCode() {
        return trackCode;
    }

    public void setTrackCode(String trackCode) {
        this.trackCode = trackCode;
    }

    public String getIp() {
        return ip;
    }

    public void setIp(String ip) {
        this.ip = ip;
    }

    public Date getDateTime() {
        return dateTime;
    }

    public void setDateTime(Date dateTime) {
        this.dateTime = dateTime;
    }

    public String getLogLevel() {
        return logLevel;
    }

    public void setLogLevel(String logLevel) {
        this.logLevel = logLevel;
    }

    public String getExecLog() {
        return execLog;
    }

    public void setExecLog(String execLog) {
        this.execLog = execLog;
    }

    public Integer getErrorCode() {
        return errorCode;
    }

    public void setErrorCode(Integer errorCode) {
        this.errorCode = errorCode;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @Override
    public String toString() {
        return "SmppLogModel{" +
                "id=" + id +
                ", msisdn='" + msisdn + '\'' +
                ", requestId='" + requestId + '\'' +
                ", smsSender='" + smsSender + '\'' +
                ", sequenceNumber=" + sequenceNumber +
                ", message='" + message + '\'' +
                ", trackCode='" + trackCode + '\'' +
                ", ip='" + ip + '\'' +
                ", dateTime=" + dateTime +
                ", logLevel='" + logLevel + '\'' +
                ", execLog='" + execLog + '\'' +
                ", errorCode=" + errorCode +
                '}';
    }
}
//////////////////////////////////////
 Date date = new Date();
            Date date1 = new Date(date.getTime() + (1000 * 60 * 60 * 24));
            Calendar cal = Calendar.getInstance(new Locale("en", "EN"));
            cal.setTime(new Date());
            cal.add(Calendar.DATE, 0);
            String format = String.format("%2d%02d%02d%02d%02d%02d020+", new Object[]{cal.get(cal.YEAR) % 100, cal.get(cal.MONTH), cal.get(cal.DAY_OF_MONTH), cal.get(cal.HOUR_OF_DAY), cal.get(cal.MINUTE), cal.get(cal.SECOND)});



 submitSm.setValidityPeriod("000000000700000R");
//            submitSm.setValidityPeriod("010203040506000R");

//            submitSm.setScheduleDeliveryTime("090831232000004+");